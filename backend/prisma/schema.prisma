generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id         String     @id @default(uuid())
  title      String
  content    String
  likes      Int        @default(0)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now())
  shareCount Int        @default(0)
  comments   Comment[]
  author     User       @relation(fields: [authorId], references: [id]) // Added name and opposite field
  authorId   String
  bookmarks  Bookmark[]
  TagPost    TagPost[]
  published  Boolean    @default(false)
  Tag        Tag?       @relation(fields: [tagId], references: [id])
  tagId      String?
}

model Comment {
  content  String
  author   User   @relation(fields: [authorId], references: [id])
  authorId String
  post     Post   @relation(fields: [postId], references: [id])
  postId   String

  @@id([postId, authorId])
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  name      String?
  password  String
  posts     Post[]
  bookmarks Bookmark[]
  tags      Tag[]
  comments  Comment[]
  TagUser   TagUser[]
  followedBy     Connection[] @relation("Follower")
  following      Connection[] @relation("Following")
}

model Qoutes {
  id    Int    @id @default(autoincrement())
  name  String
  qoute String
}

model Bookmark {
  post     Post   @relation(fields: [postId], references: [id])
  postId   String
  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  @@id([postId, authorId])
}

model Tag {
  id      String    @id @default(uuid())
  name    String    @unique
  users   User[] // Added relation field
  posts   Post[]
  TagUser TagUser[]
  TagPost TagPost[]
}

model TagUser {
  tag    Tag    @relation(fields: [tagId], references: [id])
  tagId  String
  user   User   @relation(fields: [userID], references: [id])
  userID String

  @@id([tagId, userID])
}

model TagPost {
  tag    Tag    @relation(fields: [tagId], references: [id])
  tagId  String
  post   Post   @relation(fields: [postId], references: [id])
  postId String

  @@id([postId, tagId])
}

model Connection {
  id           String   @id @default(uuid())
  follower     User     @relation("Follower", fields: [followerId], references: [id])
  followerId   String
  following    User     @relation("Following", fields: [followingId], references: [id])
  followingId  String
  createdAt    DateTime @default(now())

  @@unique([followerId, followingId])
}